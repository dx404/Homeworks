/**************************************************************
 * miniJava feature tests v2.2
 *
 *   use this to check contextual analysis and code
 *   generation for successively more adventurous
 *   miniJava constructs.
 *
 *   uncomment System.out.println(x) statements once
 *     you have sufficient functionality
 *   
 *   When interpreted using mJam the compiled code 
 *   should print 1 ... 15 999
 *
 **************************************************************/

/************
 *
 *  mainclass
 */
class miniJavaTest
{
    public static void main(String[] args)
    {        
        /* 1: simple literal */
        int x = 1;
        // System.out.println(x);
        
        /* 2: simple expression */
        x = 2 * x + x - 1;
        // System.out.println(x);
        
        /* 3: conditional statement */
        if (x == 2)
            x = 3;
        else
            x = -1;
        // System.out.println(x);
        
        /* 4: repetitive statement */
        int i = 0;
        while (i < 4) {
            i = i + 1;
            x = i;
        }
        // System.out.println(x);
        
        /* 5: object creation */
        A a = new A();
        x = 5 + a.n;
        // System.out.println(x);
        
        /* 6: object update */
        a.b = new B();
        a.b.n = 6;
        x = a.b.n;
        // System.out.println(x);
        
        /* 7: field reference and update */
        a.b.a = a;
        a.b.a.n = x + 1;
        x = a.n;
        // System.out.println(x);
        
        /* 8: array creation */
        int aa_length = 4;
        int [] aa = new int [aa_length];
        x = aa_length * 2;
        // System.out.println(x);
        
        /* 9: array reference and update */
        i = 1;
        aa[0] = i;
        while (i < aa_length) {
            aa[i] = aa[i-1] + i;
            i = i + 1;
        }
        x = aa[3] + 2;
        // System.out.println(x);
        
        /* 10: simple method invocation */
        a.start();
        
        /* end of test */
        System.out.println(999);
    }
}

/**********************************************************************
 *
 *  class A
 */
class A
{
    int n;
    B b;
    
    public void start(){
        int x = 10;
        // System.out.println(x);
        
        /* 11: field ref */
        n = 11;
        x = b.a.n;
        // System.out.println(x);
        
        /* 12: complex method invocation */
        n = 4;
        x = 1 + foo(3,4);
        // System.out.println(x);
        
        /* 13: println */
        System.out.println(13);
        
        /* 14: recursion */
        System.out.println(8 + b.fact(3));
        
        /* 15: object-values */
        this.n = 4;
        b.n = 5;
        System.out.println(2 + this.goo(this,this.b));
        
    }
    
    public int foo(int x, int y) {
        return (n + x + y);
    }
    
    public int goo(A a, B bb) {
        return (a.n + bb.n + this.n);
    }
}

/**********************************************************************
 *
 *  class B
 */
class B
{
    int n;
    A a;
    
    public int fact(int nn){
        int r = 1;
        if (nn > 1)
            r = nn * fact(nn -1);
        return r;
    }
}
